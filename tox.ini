[tox]
envlist = pytest, flake8, mypy, bandit, vulture
skipsdist=True

[testenv]
passenv=HOME
deps = pipenv
sdistsrc={toxworkdir}/dist


# ==
# PyTest tests
# ==

[testenv:pytest]
passenv=HOME
commands=
    pipenv install --ignore-pipfile --dev
    pipenv run python -m pytest tests --doctest-modules --junitxml=tests/results/test-pytest.xml \
        --cov-config=tox.ini --cov \
        --cov-report=xml:tests/results/coverage.xml \
        --cov-report=html:tests/results/htmlcov \
        --cov-report=term

[coverage:run]
source = .
omit =
    tests/*
    .venv/*
    .tox/*


# ==
# MyPy tests
#==

[testenv:mypy]
passenv=HOME
commands=
    pipenv install --ignore-pipfile --dev
    -pipenv run mypy --install-types --non-interactive \
        --config-file tox.ini \
        --junit-xml tests/results/test-mypy.xml \
        --exclude 'tests/' \
        .


# ==
# mypy config
# ==

[mypy]
warn_return_any = True
warn_unused_configs = True
show_column_numbers = True
strict_optional = True
warn_unreachable =True
warn_unused_ignores = True
warn_redundant_casts = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
; strict = True

[mypy-jmespath]
ignore_missing_imports = True


# ==
# Bandit tests
#==

[testenv:bandit]
deps=
    bandit

commands=
    -bandit -r -l -i -x './tests,./.tox,./.mypy_cache,./vulture.py,./.venv' .
    bandit --format xml --output tests/results/test-bandit.xml -r -l -i -x './tests,./.tox,./.mypy_cache,./vulture.py,./.venv' .


# ==
# Vulture tests
#==

[testenv:vulture]
deps=
    vulture
    flake8-junit-report
    click

whitelist_externals = vulture.py
commands=
    python .devops/vulture.py tests/results/vulture.txt --sort-by-size --min-confidence 70 --exclude .venv,.tox .
commands_post=
    flake8_junit tests/results/vulture.txt tests/results/test-vulture.xml


# ==
# Flake8 tests
#==

[testenv:flake8]
passenv=HOME
commands=
    pipenv install --ignore-pipfile --dev
    pipenv run flake8 --version
    pipenv run flake8 \
        --tee \
        --output-file tests/results/flake8.txt \
        .
commands_post=
    pipenv run flake8_junit tests/results/flake8.txt tests/results/test-flake8.xml

[flake8]
inline-quotes = double
max-line-length = 120
eradicate-aggressive = true
radon-max-cc = 12
radon-show-closures = true
max-local-variables = 6
ignore=
    E402,
    F821,
    N812,
    W503,

    WPS300, # Found local import, we allow local import

    WPS111, # Found too short variable name, Ignore this one for now, decide if we want it
    WPS305, # Disallow of f-strings, I understand it but dont share it
    I003, # isort expected 1 blank line in imports, found 0
    WPS332, # Enable Walrus operator, because why not
    WPS348, # Found a line that starts with a dot

per-file-ignores =
  # Pytest fixtures
  tests/*.py:
    WPS442, S101

  # Ignore too many noqa comments and init with logic
  functions/__init__.py: WPS402, WPS412

  # WPS202 Found too many module members
  functions/utils/nlp_utils.py: WPS202

  # WPS202 Found too many module members
  # WPS204 Found overused expression
  tests/test_skillcurateinformation.py: WPS202, WPS442, S101, WPS204

  # WPS202 Found too many module members
  tests/test_skillpayslip.py: WPS202, WPS442, S101

  # WPS202 Found too many module members
  tests/test_skillbankstatement.py: WPS202, WPS442, S101

  # WPS202 Found too many module members
  tests/conftest.py: WPS202, WPS442, S101

max-complexity=12
doctests = True
exclude =
    .git,
    __pycache__,
    docs/source/conf.py,
    old,
    build,
    dist,
    .venv,
    .tox,
    .eggs,
    *.egg,

# ==
# pyright tests
#==

[testenv:pyright]
deps=
    -rrequirements.txt

whitelist_externals = pyright
commands=
    pyright

# ==
# Pre-commit tests
#==

[testenv:pre-commit]
skip_install = true
deps = pre-commit
commands = pre-commit run --all-files --show-diff-on-failure
